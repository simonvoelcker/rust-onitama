{"version":3,"sources":["context/AppContext.js","components/panels/Cell.js","components/panels/Card.js","components/panels/Player.js","components/panels/Field.js","components/panels/StandardButton.js","components/views/Game.js","App.js","index.js"],"names":["$axios","axios","create","baseURL","timeout","headers","AppContext","React","createContext","AppProvider","props","options","state","gameId","game","selection","fromPosition","targetPosition","cardName","selectableOptions","mutations","startNewGame","post","then","response","setState","data","getGame","getOptions","get","clearSelection","pickOption","optionIndex","onCellClick","piece","position","player","current_player","setOrKeepSelection","onCardClick","this","setSelection","filterSelectionOptions","length","indexOf","filter","option","from_position","x","y","target_position","card","name","Provider","value","children","Component","AppConsumer","Consumer","Cell","from","context","target","is_master","className","getClasses","onClick","src","getImageSrc","alt","contextType","Card","classes","mini","toLowerCase","Player","playerIndex","parseInt","public_card","players","cards","Field","cellIndex","field","pieces","key","map","getCell","StandardButton","color","disabled","style","onContextMenu","e","preventDefault","Game","App","path","component","exact","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07aa4667.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport axios from 'axios'\n\nconst $axios = axios.create({ baseURL: '/api/', timeout: 10000, headers: { 'Content-Type': 'application/json' }})\n\nexport const AppContext = React.createContext()\n\nexport class AppProvider extends Component {\n  constructor (props) {\n    super(props)\n\n    this.options = null // options from game server\n\n    this.state = {\n      gameId: null,\n      game: null,\n      selection: {\n        fromPosition: null,\n        targetPosition: null,\n        cardName: null,\n      },\n      selectableOptions: [], // options filtered down by selection\n    }\n\n    this.mutations = {\n      startNewGame: () => {\n        return $axios.post('/games').then((response) => {\n          this.setState({gameId: response.data})\n          this.mutations.getGame(response.data)\n          this.mutations.getOptions(response.data)\n        })\n      },\n      getGame: (gameId) => {\n        return $axios.get('/games/' + gameId).then((response) => {\n          this.setState({game: response.data})\n        })\n      },\n      getOptions: (gameId) => {\n        return $axios.get('/games/' + gameId + '/options').then((response) => {\n          this.options = response.data\n          this.clearSelection()\n        })\n      },\n      pickOption: (optionIndex) => {\n        return $axios.post('/games/' + this.state.gameId + '/options/' + optionIndex).then((response) => {\n          this.mutations.getGame(this.state.gameId)\n          this.mutations.getOptions(this.state.gameId)\n        })\n      },\n      onCellClick: (piece, position) => {\n        if (piece && piece.player === this.state.game.current_player) {\n          // own piece clicked -> from_position selected\n          this.setOrKeepSelection(position, null, null)\n        } else {\n          // either opponent piece clicked or no piece at all -> target_position selected\n          this.setOrKeepSelection(null, position, null)\n        }\n      },\n      onCardClick: (cardName) => {\n        this.setOrKeepSelection(null, null, cardName)\n      },\n    }\n  }\n\n  setOrKeepSelection (fromPosition, targetPosition, cardName) {\n    let selection = {\n      fromPosition: fromPosition || this.state.selection.fromPosition,\n      targetPosition: targetPosition || this.state.selection.targetPosition,\n      cardName: cardName || this.state.selection.cardName,\n    }\n    this.setSelection(selection)\n  }\n\n  setSelection(selection) {\n    // apply selection change only if we'll have at least one option after this\n    let selectableOptions = this.filterSelectionOptions(selection)\n    if (selectableOptions.length > 0) {\n      this.setState({\n        selection: selection,\n        selectableOptions: selectableOptions,\n      })\n\n      if (selection.fromPosition !== null &&\n          selection.targetPosition !== null &&\n          selection.cardName !== null &&\n          selectableOptions.length === 1) {\n        // everything selected, apply!\n        let optionIndex = this.options.indexOf(selectableOptions[0])\n        this.mutations.pickOption(optionIndex)\n      }\n    } else {\n      this.clearSelection()\n    }\n  }\n\n  clearSelection () {\n    this.setState({\n      selection: {\n        fromPosition: null,\n        targetPosition: null,\n        cardName: null,\n      },\n      selectableOptions: this.state.options,\n    })\n  }\n\n  filterSelectionOptions (selection) {\n    let filteredOptions = this.options.filter(option => {\n      if (selection.fromPosition !== null && (\n          option.from_position.x !== selection.fromPosition.x ||\n          option.from_position.y !== selection.fromPosition.y)) {\n        return false\n      }\n      if (selection.targetPosition !== null && (\n          option.target_position.x !== selection.targetPosition.x ||\n          option.target_position.y !== selection.targetPosition.y)) {\n        return false\n      }\n      if (selection.cardName !== null && option.card.name !== selection.cardName) {\n        return false\n      }\n      return true\n    })\n    return filteredOptions\n  }\n\n  render () {\n    return (\n      <AppContext.Provider value={{ state: this.state, mutations: this.mutations }}>\n        {this.props.children}\n      </AppContext.Provider>\n    )\n  }\n}\n\nexport const AppConsumer = AppContext.Consumer\n","import React, { Component } from 'react'\nimport { AppConsumer, AppContext } from '../../context/AppContext'\n\nexport default class Cell extends Component {\n\n  getClasses () {\n    let from = this.context.state.selection.fromPosition\n    if (from && from.x === this.props.position.x && from.y === this.props.position.y) {\n      return 'cell from-cell'\n    }\n    let target = this.context.state.selection.targetPosition\n    if (target && target.x === this.props.position.x && target.y === this.props.position.y) {\n      return 'cell target-cell'\n    }\n    return 'cell'\n  }\n\n  getImageSrc () {\n    let color = this.props.piece.player === 0 ? 'blue' : 'red'\n    let kind = this.props.piece.is_master ? 'master' : 'apprentice'\n    return '/img/piece-' + color + '-' + kind + '-front.png'\n  }\n\n  render () {\n    return (\n      <AppConsumer>\n        {({ state, mutations }) => (\n          <div\n            className={this.getClasses()}\n            onClick={() => mutations.onCellClick(this.props.piece, this.props.position)}>\n            {this.props.piece && <img className='piece' src={this.getImageSrc()} alt='piece' />}\n          </div>\n        )}\n      </AppConsumer>\n    )\n  }\n}\n\nCell.contextType = AppContext\n","import React, { Component } from 'react'\nimport { AppConsumer, AppContext } from '../../context/AppContext'\n\nexport default class Card extends Component {\n\n  getClasses () {\n    let classes = 'card'\n    if (this.context.state.selection.cardName === this.props.name) {\n      classes += ' selected-card'\n    }\n    if (this.props.mini) {\n      classes += ' mini-card'\n    }\n    return classes\n  }\n\n  getImageSrc () {\n    return '/img/card-' + this.props.name.toLowerCase() + '.jpg'\n  }\n\n  render () {\n    return (\n      <AppConsumer>\n        {({ state, mutations }) => (\n          <div className='card-container'>\n            <img onClick={() => mutations.onCardClick(this.props.name)}\n                 className={this.getClasses()}\n                 src={this.getImageSrc()}\n                 alt='card' />\n          </div>\n        )}\n      </AppConsumer>\n    )\n  }\n}\n\nCard.contextType = AppContext\n","import React, { Component } from 'react'\nimport { AppConsumer, AppContext } from '../../context/AppContext'\nimport Card from './Card'\n\nexport default class Player extends Component {\n\n  getClasses () {\n    return this.props.playerIndex === '0' ? 'player-panel' : 'player-panel opponent-player-panel'\n  }\n\n  render () {\n    return (\n      <AppConsumer>\n        {({ state }) => (\n          <div className={this.getClasses()}>\n            { parseInt(this.props.playerIndex) === state.game.current_player\n              ? <Card mini name={state.game.public_card.name} />\n              : <div className='mini-card'></div>\n            }\n            <div className='cards'>\n              <Card name={state.game.players[this.props.playerIndex].cards[0].name} />\n              <Card name={state.game.players[this.props.playerIndex].cards[1].name} />\n            </div>\n          </div>\n        )}\n      </AppConsumer>\n    )\n  }\n}\n\nPlayer.contextType = AppContext\n","import React, { Component } from 'react'\nimport { AppConsumer, AppContext } from '../../context/AppContext'\nimport Cell from './Cell'\nimport Player from './Player'\n\nexport default class Field extends Component {\n  getCell (x, y) {\n    let cellIndex = y*5+x\n    let piece = this.context.state.game.field.pieces[cellIndex]\n    let position = {x: x, y: y}\n    return <Cell position={position} piece={piece} key={cellIndex} />\n  }\n\n  render () {\n    return (\n      <AppConsumer>\n        {({ state, mutations }) => (\n          <div className='field-panel'>\n            <Player playerIndex='1' />\n            <div className='field'>\n              <div className='field-rows'>\n              {[4,3,2,1,0].map((y) => {\n                return (\n                  <div key={y} className='field-columns'>\n                  {[0,1,2,3,4].map((x) => this.getCell(x, y))}\n                  </div>\n                )\n              })}\n              </div>\n            </div>\n            <Player playerIndex='0' />\n          </div>\n        )}\n      </AppConsumer>\n    )\n  }\n}\n\nField.contextType = AppContext\n","import React, { Component } from 'react'\nimport { AppContext, AppConsumer } from '../../context/AppContext'\n\nexport default class StandardButton extends Component {\n  render () {\n    const { onClick, color, children, disabled, style, className } = this.props\n    return (\n      <AppConsumer>\n        {({ state }) => (\n          <button\n            style={style}\n            className={className || 'btn'}\n            disabled={disabled}\n            color={color}\n            onClick={onClick}\n            onContextMenu={(e) => {\n              e.preventDefault()\n              onClick()\n            }}>\n            {children}\n          </button>\n        )}\n      </AppConsumer>\n    )\n  }\n}\n\nStandardButton.contextType = AppContext\n","import React, { Component } from 'react'\n\nimport Field from '../panels/Field'\nimport { AppConsumer, AppContext } from '../../context/AppContext'\nimport StandardButton from '../panels/StandardButton'\n\nexport default class Game extends Component {\n  render () {\n    return (\n      <AppConsumer>\n        {({ state, mutations }) => (\n          <div>\n            {state.game === null\n            ? <StandardButton onClick={() => mutations.startNewGame()}>New Game</StandardButton>\n            : <Field />\n            }\n          </div>\n        )}\n      </AppConsumer>\n    )\n  }\n}\n\nGame.contextType = AppContext\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { AppProvider } from './context/AppContext'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './assets/css/main.sass'\n\nimport Game from './components/views/Game'\n\nclass App extends Component {\n  render () {\n    return (\n      <AppProvider value={this.state}>\n        <Router>\n          <div className='App'>\n            <Switch>\n              <Route path='/' component={Game} exact />\n              <Route>\n                <Redirect to='/' />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </AppProvider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}